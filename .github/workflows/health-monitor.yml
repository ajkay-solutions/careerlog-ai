name: Health Monitor & Alerts

on:
  schedule:
    # Check health every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check Backend Health
      id: backend-health
      run: |
        echo "🔍 Checking WorkLog AI Backend health..."
        
        # Check main health endpoint with timeout
        if backend_health=$(timeout 30 curl -s https://worklog-ai-backend.onrender.com/health); then
          echo "✅ Backend health check successful"
          echo "backend_status=healthy" >> $GITHUB_OUTPUT
          
          # Extract and display key metrics
          echo "📊 Backend Health Report:"
          echo "$backend_health" | grep -E '"status"|"timestamp"|"environment"' || echo "Raw response: $backend_health"
        else
          echo "❌ Backend health check failed"
          echo "backend_status=unhealthy" >> $GITHUB_OUTPUT
        fi

    - name: Check Database Connectivity
      id: database-health
      run: |
        echo "🔍 Checking database connectivity..."
        
        # Check database-specific health endpoint
        if db_health=$(timeout 30 curl -s https://worklog-ai-backend.onrender.com/api/health/database); then
          echo "✅ Database connectivity check successful"
          echo "database_status=healthy" >> $GITHUB_OUTPUT
          echo "📊 Database Health: $db_health"
        else
          echo "❌ Database connectivity check failed"
          echo "database_status=unhealthy" >> $GITHUB_OUTPUT
        fi

    - name: Check Frontend Availability
      id: frontend-health
      run: |
        echo "🔍 Checking WorkLog AI Frontend availability..."
        
        # Check frontend with timeout
        frontend_code=$(timeout 30 curl -s -o /dev/null -w "%{http_code}" https://worklog.ajkaysolutions.com)
        
        if [ "$frontend_code" -eq 200 ]; then
          echo "✅ Frontend is available (HTTP $frontend_code)"
          echo "frontend_status=healthy" >> $GITHUB_OUTPUT
        else
          echo "❌ Frontend check failed (HTTP $frontend_code)"
          echo "frontend_status=unhealthy" >> $GITHUB_OUTPUT
        fi

    - name: Test OAuth Endpoints
      id: oauth-health
      run: |
        echo "🔍 Testing OAuth endpoint availability..."
        
        # Test Google OAuth endpoint (should return 302 redirect)
        google_code=$(timeout 15 curl -s -o /dev/null -w "%{http_code}" https://worklog-ai-backend.onrender.com/auth/google)
        
        if [ "$google_code" -eq 302 ]; then
          echo "✅ Google OAuth endpoint working (HTTP $google_code)"
          oauth_status="healthy"
        else
          echo "❌ Google OAuth endpoint failed (HTTP $google_code)"
          oauth_status="unhealthy"
        fi
        
        # Test LinkedIn OAuth endpoint (should return 302 redirect)
        linkedin_code=$(timeout 15 curl -s -o /dev/null -w "%{http_code}" https://worklog-ai-backend.onrender.com/auth/linkedin)
        
        if [ "$linkedin_code" -eq 302 ]; then
          echo "✅ LinkedIn OAuth endpoint working (HTTP $linkedin_code)"
        else
          echo "❌ LinkedIn OAuth endpoint failed (HTTP $linkedin_code)"
          oauth_status="unhealthy"
        fi
        
        echo "oauth_status=$oauth_status" >> $GITHUB_OUTPUT

    - name: Performance Check
      run: |
        echo "⚡ Checking response times..."
        
        # Measure backend response time
        backend_time=$(timeout 30 curl -s -o /dev/null -w "%{time_total}" https://worklog-ai-backend.onrender.com/api/health/quick)
        echo "🔥 Backend response time: ${backend_time}s"
        
        # Measure frontend response time
        frontend_time=$(timeout 30 curl -s -o /dev/null -w "%{time_total}" https://worklog.ajkaysolutions.com)
        echo "🌐 Frontend response time: ${frontend_time}s"
        
        # Check if response times are acceptable
        if (( $(echo "$backend_time < 5.0" | bc -l) )); then
          echo "✅ Backend response time is good"
        else
          echo "⚠️ Backend response time is slow (>${backend_time}s)"
        fi

    - name: Health Summary
      run: |
        echo "🎯 Health Check Summary ($(date))"
        echo "================================="
        echo "Backend Status: ${{ steps.backend-health.outputs.backend_status }}"
        echo "Database Status: ${{ steps.database-health.outputs.database_status }}"
        echo "Frontend Status: ${{ steps.frontend-health.outputs.frontend_status }}"
        echo "OAuth Status: ${{ steps.oauth-health.outputs.oauth_status }}"
        echo "================================="
        
        # Count healthy services
        healthy_count=0
        [ "${{ steps.backend-health.outputs.backend_status }}" = "healthy" ] && ((healthy_count++))
        [ "${{ steps.database-health.outputs.database_status }}" = "healthy" ] && ((healthy_count++))
        [ "${{ steps.frontend-health.outputs.frontend_status }}" = "healthy" ] && ((healthy_count++))
        [ "${{ steps.oauth-health.outputs.oauth_status }}" = "healthy" ] && ((healthy_count++))
        
        echo "🏆 Healthy Services: $healthy_count/4"
        
        if [ $healthy_count -eq 4 ]; then
          echo "🎉 All systems operational!"
        elif [ $healthy_count -ge 2 ]; then
          echo "⚠️ Some systems need attention"
        else
          echo "🚨 Multiple systems are down"
        fi