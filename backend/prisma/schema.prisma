// WorkLog AI - Database Schema
// This file was auto-generated by Claude Code based on the technical specification

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  
  // OAuth provider info (same structure as Job Assistant)
  provider      String    // "google" | "linkedin"
  providerId    String    // Provider's user ID
  displayName   String?
  name          Json?     // { givenName, familyName }
  profilePhoto  String?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  entries       Entry[]
  projects      Project[]
  skills        Skill[]
  competencies  Competency[]
  settings      UserSettings?
  
  @@unique([provider, providerId])
  @@index([email])
}

model UserSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Preferences
  reminderTime        String?  // "18:00" for daily reminder
  reminderEnabled     Boolean  @default(true)
  aiPromptStyle       String   @default("balanced") // "minimal", "balanced", "detailed"
  defaultTags         String[] // Quick-add tags
  
  // Privacy
  allowExport         Boolean  @default(true)
  allowAnalytics      Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Entry {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Content
  date          DateTime  // Entry date (not created date)
  rawText       String    @db.Text // User's original input
  wordCount     Int       @default(0)
  
  // AI Extracted Data (JSON fields for flexibility)
  extractedData Json?     // {projects: [], skills: [], metrics: [], people: [], competencies: [], keywords: []}
  
  // Manual Tags (array of IDs)
  projectIds    String[]  // References to Project.id
  skillIds      String[]  // References to Skill.id
  competencyIds String[]  // References to Competency.id
  
  // Metadata
  isHighlight   Boolean   @default(false) // User marked as important
  sentiment     String?   // "positive", "neutral", "negative" (AI detected)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId, date])
  @@index([userId, createdAt])
  @@unique([userId, date]) // One entry per user per date
}

model Project {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name          String
  description   String?   @db.Text
  status        String    @default("active") // "active", "completed", "archived"
  
  // Timeline
  startDate     DateTime?
  endDate       DateTime?
  
  // Metrics (denormalized for performance)
  entryCount    Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
  @@index([userId, status])
  @@unique([userId, name]) // Prevent duplicate project names per user
}

model Skill {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name          String    // e.g., "Python", "Leadership", "Public Speaking"
  category      String?   // "technical", "soft", "domain"
  
  // Tracking
  firstUsed     DateTime  @default(now())
  lastUsed      DateTime  @default(now())
  usageCount    Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
  @@index([userId, category])
  @@unique([userId, name])
}

model Competency {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name          String    // e.g., "Leadership", "Innovation", "Customer Focus"
  framework     String?   // "custom", "corporate", "industry_standard"
  description   String?   @db.Text
  
  // Tracking
  demonstrationCount Int @default(0)
  lastDemonstrated   DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
  @@index([userId, framework])
  @@unique([userId, name])
}